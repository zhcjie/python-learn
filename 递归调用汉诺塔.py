#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def move(n,a,b,c):
    if n == 1:
        print(a,'→>',c)
        return   
    else:
        move(n-1,a,c,b) #先执行把n-1个移动到b上这个操作。
        move(1,a,b,c)   #再执行把最下面1个最大的移动到 c 这个操作
        move(n-1,b,a,c) #最后执行把n-1个从b上移动到c上这个操作 
		
print(move(4, 'A', 'B', 'C'))
		
# 利用递归函数移动汉诺塔:
#  1.我们定义函数的时候，def move(n,a,b,c) 中a,b,c所表达的意义是代指这里有三个柱子:起始柱，中间柱，终点柱。
#而传值的时候，给的'a','b','c'，在于具体给这个函数指明了起始柱是a,中间柱是b,终点柱是c，
#即我们要把圆盘从a柱子移动到c柱子中间借助b柱子。
#  2.a,b,c上个柱子的顺序就是从左到右a,b,c。第一句的意思参考上条解释：是把n-1个柱子从a借助c移动到b。
#建议你可以百度下汉诺塔问题，理解汉诺塔的问题的本质。 
#  3.循环是通过函数的递归实现的。所有的递归都是一种循环。执行顺序的话按照函数定义的顺序从上往下执行。
#程序中if 的话写成这样比较好理解: